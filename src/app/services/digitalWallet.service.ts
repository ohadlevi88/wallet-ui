/**
 * API for Digital wallet
 * API for Digital wallet
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../api-config/encoder';

import { Observable }                                        from 'rxjs';

import { CreateWalletRequest } from '../model/createWalletRequest';
import { CreatedWalletDetails } from '../model/createdWalletDetails';
import { MoveFundsRequest } from '../model/moveFundsRequest';
import { MovedFundsResponse } from '../model/movedFundsResponse';
import { WalletBalance } from '../model/walletBalance';
import { BASE_PATH, Configuration } from '../api-config';

@Injectable()
export class DigitalWalletService {

    protected basePath = 'http://localhost:3000';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create digital wallet
     * Create digital wallet
     * @param body create wallet
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createDigitalWallet(body: CreateWalletRequest, observe?: 'body', reportProgress?: boolean): Observable<CreatedWalletDetails>;
    public createDigitalWallet(body: CreateWalletRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CreatedWalletDetails>>;
    public createDigitalWallet(body: CreateWalletRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CreatedWalletDetails>>;
    public createDigitalWallet(body: CreateWalletRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createDigitalWallet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CreatedWalletDetails>('post',`${this.basePath}/digitalwallet/create`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get balance
     * get balance
     * @param walletId wallet id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBalance(walletId: string, observe?: 'body', reportProgress?: boolean): Observable<WalletBalance>;
    public getBalance(walletId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WalletBalance>>;
    public getBalance(walletId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WalletBalance>>;
    public getBalance(walletId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (walletId === null || walletId === undefined) {
            throw new Error('Required parameter walletId was null or undefined when calling getBalance.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        //return this.httpClient.request<WalletBalance>('get',`${this.basePath}/digitalwallet/balance/${encodeURIComponent(String(walletId))}`,
        return this.httpClient.request<WalletBalance>('get',`${this.basePath}/digitalwallet/balance`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * move funds between wallets
     * move funds between wallets
     * @param body move funds between wallets
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public paymoney(body: MoveFundsRequest, observe?: 'body', reportProgress?: boolean): Observable<MovedFundsResponse>;
    public paymoney(body: MoveFundsRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MovedFundsResponse>>;
    public paymoney(body: MoveFundsRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MovedFundsResponse>>;
    public paymoney(body: MoveFundsRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling paymoney.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<MovedFundsResponse>('post',`${this.basePath}/digitalwallet/paymoney`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
